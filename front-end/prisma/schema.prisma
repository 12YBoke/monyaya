// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  trainerId          String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])
  trainer            Trainer   @relation(fields: [trainerId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String?
  trainerId    String?
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?     @relation(fields: [userId], references: [id])
  trainer      Trainer?  @relation(fields: [trainerId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}


model User {
  id            String       @id @default(cuid())
  firstName     String
  lastName      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  phoneNumber   String?    @unique
  email         String    @unique
  emailVerified DateTime?
  courses       Course[]
  accounts      Account[]
  sessions      Session[]
}

model Trainer {
  id            String       @id @default(cuid())
  firstName     String
  lastName      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  phoneNumber   String?    @unique
  email         String    @unique
  emailVerified DateTime?
  courses       Course[]
  accounts      Account[]
  sessions      Session[]
  subCategory SubCategory[]
}

model SubCategory {
  id          String       @id @default(cuid())
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime  @default(now())
  name        String    @unique
  trainers    Trainer[]
}

model Category {
  id          String       @id @default(cuid())
  courses     SubCategory[]
  createdAt   DateTime  @default(now())
  name        String    @unique
}

model Course {
  id          String       @id @default(cuid())
  authorId    String       
  createdAt   DateTime  @default(now())
  custormers  User[]
  description String
  price       Float
  trainer     Trainer   @relation(fields:[authorId], references: [id])
}

model NewsletterSubscribers {
  id                    String     @id @default(cuid())
  email                 String   @unique
  subscriptionStatus    Status     @default(active)
}

enum Status {
  active
  inactive
}